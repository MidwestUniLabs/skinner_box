name: Build and Release with Nuitka

on:
  # Run automatically on pushes to `main`
  push:
    branches: [ main ]

  # Allow manual runs on other branches
  workflow_dispatch:

permissions:
  contents: write  # Needed to create a GitHub release

jobs:
  build_and_release:
    runs-on: ubuntu-latest

    steps:
      # 1) Check out your repository
      - name: Check out code
        uses: actions/checkout@v3

      # 2) Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      # 3) Cache pip
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # 4) Install dependencies
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      # 5) Compile code with Nuitka
      - name: Compile code with Nuitka
        run: |
          python -m nuitka \
            --onefile \
            --follow-imports \
            --jobs=2 \
            --include-data-dir=templates=templates \
            --include-data-dir=static=static \
            --include-package-data=limits \
            --output-filename=skinnerBox-run \
            main.py
            
      # 6) Optional debug listing
      - name: List artifacts (debug)
        run: ls -al

      # 7) Generate short SHA (so you don't use a 40-char invalid tag)
      - name: Generate short SHA
        id: short_sha
        run: echo "SHORT_SHA=${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT

      # 8) Create a GitHub release
      - name: Create a GitHub release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v0.1-${{ steps.short_sha.outputs.SHORT_SHA }}
          release_name: "Release v0.1-${{ steps.short_sha.outputs.SHORT_SHA }}"
          draft: false
          prerelease: false

      # 9) Upload the Nuitka-compiled binary to the release
      - name: Upload compiled binary
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./skinnerBox-run    # Must match the actual Nuitka output name
          asset_name: skinnerBox-run
          asset_content_type: application/octet-stream
