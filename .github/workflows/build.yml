name: Build and Release with Nuitka

on:
  # Run automatically on pushes to `main`
  push:
    branches: [ main ]

  # Allow manual runs on other branches
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build_and_release:
    runs-on: ubuntu-latest

    steps:
      # Check out your repository
      - name: Check out code
        uses: actions/checkout@v3

      # (Optional) Set up Python if needed
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      # Compile code with Nuitka
      - name: Compile code with Nuitka
        run: |
          # Compile main Python script, "skinnerBox.py"
          python -m nuitka \
          --onefile \
          --follow-imports \
          --include-data-dir=templates=templates \
          --include-data-dir=static=static \
          --include-package-data=limits \
          --output-filename=skinnerBox-run \
          --jobs=2 \
          main.py

          # After this, Nuitka should produce a binary (e.g. skinnerBox.exe on Windows or skinnerBox on Linux)

      - name: List artifacts (debug)
        run: ls -al


      # Optional: Test the compiled binary
      - name: Test compiled binary
        run: |
          echo "No tests yet; skipping."

      # Create a release
      - name: Create a GitHub release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v0.1-${{ github.sha:0:7 }}
          release_name: "Release for ${{ github.ref }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      # Upload the Nuitka-compiled binary to the release
      - name: Upload compiled binary
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./skinnerBox-run
          asset_name: skinnerBox-run
          asset_content_type: application/octet-stream
